package bot

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	"log"
	"mybot/api"
	"mybot/bot2"
	"mybot/pexels"
	"mybot/sub"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"database/sql"
	"mybot/db"
	"mybot/session"
)

var Bot *tgbotapi.BotAPI
var database *sql.DB

var sessions *session.Manager
var postCache = make(map[int64][]db.ScheduledPost)

func SetupHandlers(bot *tgbotapi.BotAPI, conn *sql.DB) {
	Bot = bot
	database = conn
	sub.SetDB(conn)
	sessions = session.NewManager()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			chatID := update.Message.Chat.ID
			s := sessions.Get(chatID)

			if s.Data == nil {
				s.Data = make(map[string]string)
			}

			if s.State != "" || len(update.Message.Photo) > 0 {
				handleState(update, Bot, s, database)
				continue
			}

			if update.Message.IsCommand() {
				sessions.Reset(chatID)
				handleCommand(update.Message, s)
				continue
			}

			handleText(update.Message, s)
		}

		if update.CallbackQuery != nil {
			chatID := update.CallbackQuery.Message.Chat.ID
			s := sessions.Get(chatID)
			handleCallback(update.CallbackQuery, s)
		}
	}
}

func checkSubscription(userID int64) bool {
	const channelUsername = "@star_poster" // –∏–ª–∏ –±–µ–∑ @, –Ω–æ —Ç–∞–∫ –Ω–∞–≥–ª—è–¥–Ω–µ–µ

	token := os.Getenv("TELEGRAM_TOKEN")
	url := fmt.Sprintf(
		"https://api.telegram.org/bot%s/getChatMember?chat_id=%s&user_id=%d",
		token, channelUsername, userID,
	)

	resp, err := http.Get(url)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return false
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	var result struct {
		OK     bool `json:"ok"`
		Result struct {
			Status string `json:"status"`
		} `json:"result"`
	}

	if err := json.Unmarshal(body, &result); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:", err)
		return false
	}

	// üîç –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª
	log.Printf("üîé –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, result.Result.Status)

	return result.Result.Status != "left"
}

// safeGetUserChannels ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ chatID —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é,
// –∞ –µ—Å–ª–∏ –ø—É—Å—Ç–æ, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª @username –∏ –º—ã –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏,
// –ø—Ä–æ–±—É–µ—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–∞–Ω–∞–ª –ø–æ username –∏–∑ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã".
func safeGetUserChannels(conn *sql.DB, chatID int64, s *session.Session) ([]db.Channel, error) {
	// 1) –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚Äî –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
	channels, err := db.GetChannelsByUser(conn, chatID)
	log.Printf("üêõ debug: GetChannelsByUser(chat_id=%d) -> %d –∫–∞–Ω–∞–ª(–æ–≤), err=%v", chatID, len(channels), err)
	if err == nil && len(channels) > 0 {
		return channels, nil
	}

	// 2) —Ñ–æ–ª–ª–±–µ–∫ –ø–æ username –∏–∑ —Å–µ—Å—Å–∏–∏ (–∏ —Å @, –∏ –±–µ–∑ @)
	uname := strings.TrimSpace(s.Data["channel_username"])
	if uname != "" {
		cands := []string{uname}
		if strings.HasPrefix(uname, "@") {
			cands = append(cands, strings.TrimPrefix(uname, "@"))
		} else {
			cands = append(cands, "@"+uname)
		}
		for _, u := range cands {
			if id, errID := db.GetChannelIDByUsername(conn, u); errID == nil && id != 0 {
				if ch, errCh := db.GetChannelByID(conn, id); errCh == nil {
					log.Printf("‚ÑπÔ∏è safeGetUserChannels: –ø–æ–¥—Ç—è–Ω—É–ª–∏ –∫–∞–Ω–∞–ª –ø–æ '%s' -> ID=%d, title=%s", u, id, ch.ChannelTitle)
					return []db.Channel{ch}, nil
				}
			}
		}
	}

	// 3) –∂–µ–ª–µ–∑–Ω—ã–π —Ñ–æ–ª–ª–±–µ–∫ ‚Äî –±–µ—Ä—ë–º –õ–Æ–ë–û–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–π) –∫–∞–Ω–∞–ª –ø–æ —ç—Ç–æ–º—É chat_id —á–µ—Ä–µ–∑ JOIN
	rows, qerr := conn.Query(`
		SELECT c.id
		FROM channels c
		JOIN clients cl ON cl.id = c.client_id
		WHERE cl.chat_id = $1
		ORDER BY c.id DESC
		LIMIT 1
	`, chatID)
	if qerr == nil {
		defer rows.Close()
		if rows.Next() {
			var id int
			if scanErr := rows.Scan(&id); scanErr == nil {
				if ch, errCh := db.GetChannelByID(conn, id); errCh == nil {
					log.Printf("‚ÑπÔ∏è safeGetUserChannels: —Ñ–æ–ª–ª–±–µ–∫ –ø–æ JOIN chat_id -> channel ID=%d, title=%s", id, ch.ChannelTitle)
					return []db.Channel{ch}, nil
				}
			}
		}
	}

	log.Printf("‚ö†Ô∏è safeGetUserChannels: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –¥–ª—è chat_id=%d, username='%s'", chatID, uname)
	return channels, err
}

func allowAccess(requesterUsername string, channel db.Channel, chatID int64) bool {
	if sub.IsSubscriptionActive(&channel) {

		log.Printf("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ %s", channel.SubscriptionUntil.Format(time.RFC3339))
		return true
	}

	log.Printf("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É –∫–∞–Ω–∞–ª–∞ @%s", channel.ChannelTitle)
	sub.SendPaymentPrompt(Bot, chatID, channel.ChannelTitle)
	return false
}

func handleCommand(msg *tgbotapi.Message, s *session.Session) {
	if msg.Command() == "start" {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		err := db.CreateClient(database, msg.Chat.ID, msg.From.UserName)

		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
		} else {
			log.Printf("‚úÖ –ö–ª–∏–µ–Ω—Ç %d (%s) —Å–æ—Ö—Ä–∞–Ω—ë–Ω", msg.Chat.ID, msg.From.UserName)
		}

		// –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É (–¥–∞–∂–µ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –µ—â—ë –Ω–µ –ø–æ–¥—Ç—è–Ω—É—Ç—å—Å—è)
		text := "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n" +
			"1. –î–æ–±–∞–≤—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª\n" +
			"2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª @star_poster\n" +
			"3. –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mychannel)"
		reply := tgbotapi.NewMessage(msg.Chat.ID, text)
		Bot.Send(reply)
	}
}

// handleText.go (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)

func handleText(msg *tgbotapi.Message, s *session.Session) {
	chatID := msg.Chat.ID
	text := msg.Text

	log.Printf("\nüì• handleText –ø–æ–ª—É—á–∏–ª: %s", text)
	log.Printf("üì• session state: %s", s.State)
	log.Printf("üì• session data: %#v", s.Data)

	// –¢—Ä–µ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª
	if !checkSubscription(msg.From.ID) {
		reply := tgbotapi.NewMessage(chatID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @star_poster, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!")
		Bot.Send(reply)
		return
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ ---
	if s.State == "choosing_channel" {
		log.Println("üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞...")

		// –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É (–∫—Ä–µ–∞—Ç–æ—Ä/–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
		if id, err := channelIDByUsername(database, text); err == nil {
			if ch, err := db.GetChannelByID(database, id); err == nil {
				if !allowAccess(msg.From.UserName, ch, chatID) {
					return
				}
			}
		}

		s.Data["channel_username"] = text
		// –≤ —Ç–≤–æ—ë–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –º—ã —Å—Ä–∞–∑—É –∏–¥—ë–º –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
		s.State = "waiting_for_topic"
		Bot.Send(tgbotapi.NewMessage(chatID, "üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –ø–æ—Å—Ç–∞:"))
		return
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "üìã –ú–æ–∏ –ø–æ—Å—Ç—ã" ---
	if text == "üìã –ú–æ–∏ –ø–æ—Å—Ç—ã" {
		username := s.Data["channel_username"]
		if username == "" {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª."))
			return
		}

		channelID, err := db.GetChannelIDByUsername(database, username)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."))
			return
		}

		channel, err := db.GetChannelByID(database, channelID)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."))
			return
		}

		// ‚úÖ –î–æ—Å—Ç—É–ø: –∫—Ä–µ–∞—Ç–æ—Ä –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
		if !allowAccess(msg.From.UserName, channel, chatID) {
			return
		}

		posts, err := db.GetScheduledPostsByChannelID(database, int64(channelID))
		if err != nil || len(posts) == 0 {
			Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"))
			return
		}

		var list string
		for i, post := range posts {
			list += fmt.Sprintf("%d ‚Äî %s, %s\n", i+1, post.Content, post.PostAt.Format("02.01.06 15:04"))
		}
		postCache[chatID] = posts

		m := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"+list)
		m.ReplyMarkup = bot2.EditPostKeyboard(posts)
		Bot.Send(m)
		return
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "üì• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç" ---
	if text == "üì• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç" {
		// –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø
		if username := s.Data["channel_username"]; username != "" {
			if channelID, err := db.GetChannelIDByUsername(database, username); err == nil {
				if channel, err := db.GetChannelByID(database, channelID); err == nil {
					if !allowAccess(msg.From.UserName, channel, chatID) {
						return
					}
				}
			}
		}

		// –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
		channels, err := safeGetUserChannels(database, chatID, s)
		if err != nil || len(channels) == 0 {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª."))
			return
		}
		channels = filterActiveChannels(channels)
		if len(channels) == 0 {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞."))
			return
		}

		var rows [][]tgbotapi.KeyboardButton
		for _, ch := range channels {
			rows = append(rows, tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("@"+ch.ChannelTitle),
			))
		}
		m := tgbotapi.NewMessage(chatID, "üì° –í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
		m.ReplyMarkup = tgbotapi.NewReplyKeyboard(rows...)
		Bot.Send(m)

		s.State = "choosing_channel"
		return
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª" ---
	if text == "üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª" {
		channels, err := safeGetUserChannels(database, chatID, s)
		if err != nil || len(channels) == 0 {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."))
			return
		}
		// –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
		channels = filterActiveChannels(channels)
		if len(channels) == 0 {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞."))
			return
		}

		m := tgbotapi.NewMessage(chatID, "üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:")
		m.ReplyMarkup = bot2.ChannelChoiceKeyboard(channels)
		Bot.Send(m)

		s.State = "choosing_channel"
		return
	}

	// --- –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ @username (–≤ –æ–±—ã—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏) ---
	if strings.HasPrefix(text, "@") && s.State != "choosing_channel" {
		if !checkSubscription(msg.From.ID) {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @star_poster, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!"))
			return
		}

		log.Println("üì• –ü–æ–ª—É—á–µ–Ω @username, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", s.State)

		if err := db.SaveChannelForClient(Bot, database, chatID, text); err != nil {
			if strings.Contains(err.Error(), "—É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω") {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω."))
			} else {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞."))
			}
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ —Å–µ—Å—Å–∏—é –¥–ª—è —Ñ–æ–ª–ª–±–µ–∫–∞
		s.Data["channel_username"] = text

		channels, err := safeGetUserChannels(database, chatID, s)
		if err != nil || len(channels) == 0 {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."))
			return
		}

		// üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
		var currentChannel *db.Channel
		for _, ch := range channels {
			if "@"+ch.ChannelTitle == text {
				currentChannel = &ch
				break
			}
		}
		if currentChannel != nil && !allowAccess(msg.From.UserName, *currentChannel, chatID) {
			return
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –≤—ã–±–æ—Ä–µ
		active := filterActiveChannels(channels)
		if len(active) == 0 {
			Bot.Send(tgbotapi.NewMessage(chatID, "–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä."))
			return
		}

		m := tgbotapi.NewMessage(chatID, "‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π username –∫–∞–Ω–∞–ª–∞.")
		m.ReplyMarkup = bot2.ChannelChoiceKeyboard(active)
		Bot.Send(m)

		s.State = "choosing_channel"
		return
	}

	// --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ---
	if strings.HasPrefix(text, "üóë –£–¥–∞–ª–∏—Ç—å ") {
		indexStr := strings.TrimPrefix(text, "üóë –£–¥–∞–ª–∏—Ç—å ")
		index, err := strconv.Atoi(indexStr)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è."))
			return
		}
		posts := postCache[chatID]
		if index < 1 || index > len(posts) {
			Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞."))
			return
		}
		selected := posts[index-1]
		if err := db.DeleteScheduledPostByID(database, selected.ID); err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç."))
		} else {
			Bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω."))
		}
		return
	}

	// --- –û—Å—Ç–∞–ª—å–Ω–æ–µ ---
	Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é."))
}

// helpers for subscription checks (–ø–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º —Å handleState –≤ —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ)
func channelIDByUsername(dbConn *sql.DB, username string) (int, error) {
	u := strings.TrimPrefix(username, "@")
	return db.GetChannelIDByUsername(dbConn, u)
}

func channelActiveByID(dbConn *sql.DB, id int) bool {
	ch, err := db.GetChannelByID(dbConn, id)
	if err != nil {
		return false
	}
	return !ch.SubscriptionUntil.IsZero() && time.Now().Before(ch.SubscriptionUntil)
}

func filterActiveChannels(chans []db.Channel) []db.Channel {
	out := make([]db.Channel, 0, len(chans))
	now := time.Now()
	for _, c := range chans {
		if !c.SubscriptionUntil.IsZero() && c.SubscriptionUntil.After(now) {
			out = append(out, c)
		}
	}
	return out
}

func handleState(update tgbotapi.Update, Bot *tgbotapi.BotAPI, s *session.Session, database *sql.DB) {
	msg := update.Message
	chatID := msg.Chat.ID
	text := msg.Text

	if !checkSubscription(msg.From.ID) {
		Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @star_poster, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!"))
		return
	}
	log.Printf("‚ñ∂Ô∏è handleState: %s | text: %s", s.State, text)

	switch s.State {

	case "choosing_channel":
		log.Println("üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞...")

		s.Data["channel_username"] = text
		s.State = "main_menu"

		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω: "+text+"\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:")
		msg.ReplyMarkup = bot2.MainKeyboardWithBack()
		Bot.Send(msg)

	case "main_menu":
		switch text {
		case "üì• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç":
			// –Ω–µ –¥–∞—ë–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
			if username := s.Data["channel_username"]; username != "" {
				channelID, err := db.GetChannelIDByUsername(database, username)
				if err == nil {
					if channel, err := db.GetChannelByID(database, channelID); err == nil {
						if !allowAccess(msg.From.UserName, channel, chatID) {
							return
						}
					}
				}
			}

			delete(s.Data, "photo")
			s.State = "waiting_for_topic"
			Bot.Send(tgbotapi.NewMessage(chatID, "üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –ø–æ—Å—Ç–∞:"))

		case "üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç":
			username := s.Data["channel_username"]
			if username != "" {
				channelID, err := db.GetChannelIDByUsername(database, username)
				if err == nil {
					channel, err := db.GetChannelByID(database, channelID)
					if err == nil {
						if !allowAccess(msg.From.UserName, channel, chatID) {
							return
						}
					}
				}
			}

			delete(s.Data, "photo")
			s.State = "scheduling_date"
			Bot.Send(tgbotapi.NewMessage(chatID, "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 24.08.25):"))

		case "üìã –ú–æ–∏ –ø–æ—Å—Ç—ã":

			username := s.Data["channel_username"]
			if username == "" {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω."))
				return
			}

			channelID, err := db.GetChannelIDByUsername(database, username)
			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."))
				return
			}

			channel, err := db.GetChannelByID(database, channelID)
			if err == nil {
				if !allowAccess(msg.From.UserName, channel, chatID) {
					return
				}
			}

			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."))
				return
			}

			posts, err := db.GetScheduledPostsByChannelID(database, int64(channelID))
			if err != nil || len(posts) == 0 {
				Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"))
				return
			}

			postCache[chatID] = posts

			var list string
			for i, post := range posts {
				list += fmt.Sprintf("%d ‚Äî %s, %s\n", i+1, post.Content, post.PostAt.Format("02.01.06 15:04"))
			}

			msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"+list)
			msg.ReplyMarkup = bot2.DeletePostKeyboard(posts)
			s.State = "viewing_posts"
			Bot.Send(msg)

		case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç":
			username := s.Data["channel_username"]
			if username == "" {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω."))
				return
			}

			channelID, err := db.GetChannelIDByUsername(database, username)
			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."))
				return
			}

			channel, err := db.GetChannelByID(database, channelID)
			if err == nil {
				if !allowAccess(msg.From.UserName, channel, chatID) {
					return
				}
			}

			posts, err := db.GetScheduledPostsByChannelID(database, int64(channelID))
			if err != nil || len(posts) == 0 {
				Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"))
				return
			}

			postCache[chatID] = posts

			var list string
			for i, post := range posts {
				imgType := "(pexels)"
				if post.Photo != "" {
					imgType = "(–í–∞—à–µ —Ñ–æ—Ç–æ)"
				}
				content := fmt.Sprintf("üìù –¢–µ–º–∞: %s\n‚úçÔ∏è –°—Ç–∏–ª—å: %s\nüåê –Ø–∑—ã–∫: %s\nüìÑ –î–ª–∏–Ω–∞: %s",
					post.Theme, post.Style, post.Language, post.Length)

				list += fmt.Sprintf("%d ‚Äî %s, %s %s\n", i+1, content, post.PostAt.Format("02.01.06 15:04"), imgType)
			}

			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"+list)
			msg.ReplyMarkup = bot2.EditPostKeyboard(posts)
			Bot.Send(msg)

			s.State = "editing_list"

		case "üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª":
			channels, err := safeGetUserChannels(database, chatID, s)
			if err != nil || len(channels) == 0 {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."))
				return
			}

			msg := tgbotapi.NewMessage(chatID, "üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:")
			msg.ReplyMarkup = bot2.ChannelChoiceKeyboard(channels)
			s.State = "choosing_channel"
			Bot.Send(msg)

		default:
			Bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é."))
		}

	case "waiting_for_topic":
		s.Data["theme"] = text
		delete(s.Data, "photo")
		s.State = "ask_for_image"
		msg := tgbotapi.NewMessage(chatID, "üñº –•–æ—á–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É?")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚úÖ –î–∞"),
				tgbotapi.NewKeyboardButton("‚ùå –ù–µ—Ç"),
			),
		)
		Bot.Send(msg)

	case "editing_list":
		if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" {
			s.State = "main_menu"
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
			msg.ReplyMarkup = bot2.MainKeyboardWithBack()
			Bot.Send(msg)
			return
		}

		if strings.HasPrefix(text, "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ") {
			numStr := strings.TrimPrefix(text, "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ")
			index, err := strconv.Atoi(numStr)
			if err != nil || index < 1 || index > len(postCache[chatID]) {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞"))
				return
			}

			post := postCache[chatID][index-1]
			s.Data["editing_post_id"] = strconv.FormatInt(post.ID, 10)

			s.State = "editing_field"
			msg := tgbotapi.NewMessage(chatID, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
			msg.ReplyMarkup = bot2.EditFieldKeyboard()
			Bot.Send(msg)
			return
		}

	case "editing_field":
		switch text {
		case "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
			s.State = "edit_date"
			Bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì):"))
		case "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è":
			s.State = "edit_time"
			Bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):"))
		case "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É":
			s.State = "edit_theme"
			Bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:"))
		case "‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å":
			s.State = "edit_style"
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:")
			msg.ReplyMarkup = bot2.Style
			Bot.Send(msg)
		case "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫":
			s.State = "edit_language"
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
			msg.ReplyMarkup = bot2.Language
			Bot.Send(msg)
		case "üìè –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É":
			s.State = "edit_length"
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É:")
			msg.ReplyMarkup = bot2.Length
			Bot.Send(msg)

		case "üñº –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
			s.State = "edit_photo_option"
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
			msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é"),
					tgbotapi.NewKeyboardButton("üñº –í–∑—è—Ç—å –∏–∑ Pexels"),
				),
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
				),
			)
			Bot.Send(msg)

		case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
			s.State = "editing_list"
			username := s.Data["channel_username"]
			channelID, _ := db.GetChannelIDByUsername(database, username)
			posts, _ := db.GetScheduledPostsByChannelID(database, int64(channelID))
			postCache[chatID] = posts

			var list string
			for i, post := range posts {
				imgType := "(pexels)"
				if post.Photo != "" {
					imgType = "(–í–∞—à–µ —Ñ–æ—Ç–æ)"
				}
				list += fmt.Sprintf("%d ‚Äî %s, %s %s\n", i+1, post.Content, post.PostAt.Format("02.01.06 15:04"), imgType)
			}

			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"+list)
			msg.ReplyMarkup = bot2.EditPostKeyboard(posts)
			Bot.Send(msg)
		}

	case "ask_for_image":
		if text == "‚úÖ –î–∞" {
			s.State = "waiting_for_photo"
			Bot.Send(tgbotapi.NewMessage(chatID, "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å"))
		} else if text == "‚ùå –ù–µ—Ç" {
			s.State = "waiting_for_style"
			showStyleOptions(chatID)
		}

	case "waiting_for_photo":
		if len(msg.Photo) > 0 {
			photo := msg.Photo[len(msg.Photo)-1]
			s.Data["photo"] = photo.FileID
			s.State = "waiting_for_style"
			showStyleOptions(chatID)
		} else {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç)."))
		}

	case "waiting_for_style":
		s.Data["style"] = text
		s.State = "waiting_for_language"
		showLanguageOptions(chatID)

	case "waiting_for_language":
		s.Data["language"] = text
		s.State = "waiting_for_length"
		showLengthOptions(chatID)

	case "waiting_for_length":
		s.Data["length"] = text
		s.State = "main_menu"

		var fileID string
		if v, ok := s.Data["photo"]; ok {
			fileID = v
		}

		// –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É ‚Äî –±–µ–∑ —Ñ–∞–ª—å—à-¬´—É—Å–ø–µ—Ö–∞¬ª
		msg := tgbotapi.NewMessage(chatID, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥‚Ä¶")
		msg.ReplyMarkup = bot2.MainKeyboardWithBack()
		Bot.Send(msg)

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ
		go generatePost(s, chatID, fileID)

	case "scheduling_date":
		if !isValidDate(text) {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: 24.08.25"))
			return
		}
		s.Data["planned_date"] = text
		s.State = "scheduling_time"
		Bot.Send(tgbotapi.NewMessage(chatID, "‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00):"))

	case "scheduling_time":
		if !isValidTime(text) {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: 14:00"))
			return
		}
		s.Data["planned_time"] = text
		s.State = "scheduling_theme"
		Bot.Send(tgbotapi.NewMessage(chatID, "üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –ø–æ—Å—Ç–∞:"))

	case "scheduling_theme":
		s.Data["theme"] = text
		s.State = "scheduling_ask_image"
		msg := tgbotapi.NewMessage(chatID, "üñº –•–æ—á–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É?")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚úÖ –î–∞"),
				tgbotapi.NewKeyboardButton("‚ùå –ù–µ—Ç"),
			),
		)
		Bot.Send(msg)

	case "scheduling_ask_image":
		if text == "‚úÖ –î–∞" {
			s.State = "scheduling_waiting_photo"
			Bot.Send(tgbotapi.NewMessage(chatID, "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å"))
		} else if text == "‚ùå –ù–µ—Ç" {
			s.State = "scheduling_style"
			showStyleOptions(chatID)
		}

	case "scheduling_waiting_photo":
		if len(msg.Photo) > 0 {
			photo := msg.Photo[len(msg.Photo)-1]
			_ = photo // –∑–∞—â–∏—Ç–Ω—ã–π –∫–æ–¥, –Ω–∏–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å
			// –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤—ã—à–µ –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è photo.FileID ‚Äî –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.
			s.State = "scheduling_style"
			showStyleOptions(chatID)
		} else {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç)."))
		}

	case "scheduling_style":
		s.Data["style"] = text
		s.State = "scheduling_language"
		showLanguageOptions(chatID)

	case "scheduling_language":
		s.Data["language"] = text
		s.State = "scheduling_length"
		showLengthOptions(chatID)

	case "scheduling_length":
		s.Data["length"] = text

		postAt, err := parseDateTime(s.Data["planned_date"], s.Data["planned_time"])
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."))
			return
		}

		username := s.Data["channel_username"]
		channelID, err := db.GetChannelIDByUsername(database, username)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."))
			return
		}

		// –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
		content := fmt.Sprintf("üìù –¢–µ–º–∞: %s\n‚úçÔ∏è –°—Ç–∏–ª—å: %s\nüåê –Ø–∑—ã–∫: %s\nüìÑ –î–ª–∏–Ω–∞: %s",
			s.Data["theme"], s.Data["style"], s.Data["language"], s.Data["length"])

		err = db.SaveScheduledPostFull(
			database,
			int64(channelID),
			content,
			postAt,
			s.Data["theme"],
			s.Data["style"],
			s.Data["language"],
			s.Data["length"],
			s.Data["photo"],
		)

		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç."))
		} else {
			msg := tgbotapi.NewMessage(chatID, "‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
			msg.ReplyMarkup = bot2.MainKeyboardWithBack()
			Bot.Send(msg)
		}

		s.State = "main_menu"

	case "edit_photo_option":
		if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é" {
			s.State = "edit_photo_upload"
			Bot.Send(tgbotapi.NewMessage(chatID, "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º):"))
		} else if text == "üñº –í–∑—è—Ç—å –∏–∑ Pexels" {
			postID, _ := strconv.Atoi(s.Data["editing_post_id"])
			err := db.UpdatePostField(database, int64(postID), "photo", "")
			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ."))
			} else {
				post, _ := db.GetScheduledPostByID(database, int64(postID))
				newContent := bot2.RegenerateContent(&post)
				_ = db.UpdatePostField(database, int64(postID), "content", newContent)

				Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –¢–µ–ø–µ—Ä—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ –∏–∑ Pexels."))
			}
			s.State = "editing_field"
			msg := tgbotapi.NewMessage(chatID, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
			msg.ReplyMarkup = bot2.EditFieldKeyboard()
			Bot.Send(msg)
		} else if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" {
			s.State = "editing_field"
			msg := tgbotapi.NewMessage(chatID, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
			msg.ReplyMarkup = bot2.EditFieldKeyboard()
			Bot.Send(msg)
		}

	case "edit_date":
		postID, _ := strconv.Atoi(s.Data["editing_post_id"])
		dateStr := strings.TrimSpace(text)

		parsed, err := time.Parse("02.01.06", dateStr)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 25.08.25"))
			return
		}

		post, _ := db.GetScheduledPostByID(database, int64(postID))
		postAt := time.Date(parsed.Year(), parsed.Month(), parsed.Day(), post.PostAt.Hour(), post.PostAt.Minute(), 0, 0, time.Local)

		err = db.UpdatePostField(database, int64(postID), "post_at", postAt)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã."))
			return
		}

		post.PostAt = postAt
		newContent := bot2.RegenerateContent(&post)
		_ = db.UpdatePostField(database, int64(postID), "content", newContent)

		channelID, _ := db.GetChannelIDByUsername(database, s.Data["channel_username"])
		updatedPosts, _ := db.GetScheduledPostsByChannelID(database, int64(channelID))
		postCache[chatID] = updatedPosts

		var list string
		for i, post := range updatedPosts {
			imgType := "(pexels)"
			if post.Photo != "" {
				imgType = "(–í–∞—à–µ —Ñ–æ—Ç–æ)"
			}
			list += fmt.Sprintf("%d ‚Äî %s, %s %s\n", i+1, post.Content, post.PostAt.Format("02.01.06 15:04"), imgType)
		}

		s.State = "editing_list"
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"+list)
		msg.ReplyMarkup = bot2.EditPostKeyboard(updatedPosts)
		Bot.Send(msg)

	case "edit_theme":
		postID, _ := strconv.Atoi(s.Data["editing_post_id"])
		newTheme := text

		err := db.UpdatePostField(database, int64(postID), "theme", newTheme)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã."))
			return
		}

		post, _ := db.GetScheduledPostByID(database, int64(postID))
		post.Theme = newTheme
		newContent := bot2.RegenerateContent(&post)
		_ = db.UpdatePostField(database, int64(postID), "content", newContent)

		channelID, _ := db.GetChannelIDByUsername(database, s.Data["channel_username"])
		updatedPosts, _ := db.GetScheduledPostsByChannelID(database, int64(channelID))
		postCache[chatID] = updatedPosts

		var list string
		for i, post := range updatedPosts {
			imgType := "(pexels)"
			if post.Photo != "" {
				imgType = "(–í–∞—à–µ —Ñ–æ—Ç–æ)"
			}
			list += fmt.Sprintf("%d ‚Äî %s, %s %s\n", i+1, post.Content, post.PostAt.Format("02.01.06 15:04"), imgType)
		}

		s.State = "editing_list"
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"+list)
		msg.ReplyMarkup = bot2.EditPostKeyboard(updatedPosts)
		Bot.Send(msg)

	case "edit_style":
		postID, _ := strconv.Atoi(s.Data["editing_post_id"])
		newStyle := text

		err := db.UpdatePostField(database, int64(postID), "style", newStyle)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è."))
			return
		}

		post, _ := db.GetScheduledPostByID(database, int64(postID))
		post.Style = newStyle
		newContent := bot2.RegenerateContent(&post)
		_ = db.UpdatePostField(database, int64(postID), "content", newContent)

		channelID, _ := db.GetChannelIDByUsername(database, s.Data["channel_username"])
		updatedPosts, _ := db.GetScheduledPostsByChannelID(database, int64(channelID))
		postCache[chatID] = updatedPosts

		var list string
		for i, post := range updatedPosts {
			imgType := "(pexels)"
			if post.Photo != "" {
				imgType = "(–í–∞—à–µ —Ñ–æ—Ç–æ)"
			}
			list += fmt.Sprintf("%d ‚Äî %s, %s %s\n", i+1, post.Content, post.PostAt.Format("02.01.06 15:04"), imgType)
		}

		s.State = "editing_list"
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"+list)
		msg.ReplyMarkup = bot2.EditPostKeyboard(updatedPosts)
		Bot.Send(msg)

	case "edit_photo_upload":
		if update.Message != nil && len(update.Message.Photo) > 0 {
			photo := update.Message.Photo[len(update.Message.Photo)-1]
			fileID := photo.FileID

			postID, _ := strconv.Atoi(s.Data["editing_post_id"])
			err := db.UpdatePostField(database, int64(postID), "photo", fileID)
			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ."))
			} else {
				post, _ := db.GetScheduledPostByID(database, int64(postID))
				newContent := bot2.RegenerateContent(&post)
				_ = db.UpdatePostField(database, int64(postID), "content", newContent)

				s.State = "editing_field"
				Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"))
				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ:")
				msg.ReplyMarkup = bot2.EditFieldKeyboard()
				Bot.Send(msg)
			}
		} else {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."))
		}

	case "edit_language":
		postID, _ := strconv.Atoi(s.Data["editing_post_id"])
		err := db.UpdatePostField(database, int64(postID), "language", text)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞."))
			return
		}
		post, _ := db.GetScheduledPostByID(database, int64(postID))
		newContent := bot2.RegenerateContent(&post)
		_ = db.UpdatePostField(database, int64(postID), "content", newContent)

		s.State = "editing_field"
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª—ë–Ω. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
		msg.ReplyMarkup = bot2.EditFieldKeyboard()
		Bot.Send(msg)

	case "edit_length":
		postID, _ := strconv.Atoi(s.Data["editing_post_id"])
		err := db.UpdatePostField(database, int64(postID), "length", text)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã."))
			return
		}
		post, _ := db.GetScheduledPostByID(database, int64(postID))
		newContent := bot2.RegenerateContent(&post)
		_ = db.UpdatePostField(database, int64(postID), "content", newContent)

		s.State = "editing_field"
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –î–ª–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
		msg.ReplyMarkup = bot2.EditFieldKeyboard()
		Bot.Send(msg)

	case "edit_time":
		postID, _ := strconv.Atoi(s.Data["editing_post_id"])
		timeStr := strings.TrimSpace(text)

		parsedTime, err := time.Parse("15:04", timeStr)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 15:30"))
			return
		}

		post, err := db.GetScheduledPostByID(database, int64(postID))
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç."))
			return
		}

		// –ë–µ—Ä—ë–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
		postAt := time.Date(
			post.PostAt.Year(),
			post.PostAt.Month(),
			post.PostAt.Day(),
			parsedTime.Hour(),
			parsedTime.Minute(),
			0, 0,
			time.Local,
		)

		err = db.UpdatePostField(database, int64(postID), "post_at", postAt)
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è."))
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º content
		post.PostAt = postAt
		newContent := bot2.RegenerateContent(&post)
		_ = db.UpdatePostField(database, int64(postID), "content", newContent)

		s.State = "editing_field"
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
		msg.ReplyMarkup = bot2.EditFieldKeyboard()
		Bot.Send(msg)

	case "viewing_posts":
		if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" {
			s.State = "main_menu"
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
			msg.ReplyMarkup = bot2.MainKeyboardWithBack()
			Bot.Send(msg)
			return
		}

		if strings.HasPrefix(text, "üóë –£–¥–∞–ª–∏—Ç—å ") {
			indexStr := strings.TrimPrefix(text, "üóë –£–¥–∞–ª–∏—Ç—å ")
			index, err := strconv.Atoi(indexStr)
			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è."))
				return
			}

			posts := postCache[chatID]
			if index < 1 || index > len(posts) {
				Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞."))
				return
			}

			selected := posts[index-1]
			err = db.DeleteScheduledPostByID(database, selected.ID)
			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç."))
				return
			}

			Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω."))

			channelID, err := db.GetChannelIDByUsername(database, s.Data["channel_username"])
			if err != nil {
				Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞."))
				return
			}

			updatedPosts, _ := db.GetScheduledPostsByChannelID(database, int64(channelID))
			postCache[chatID] = updatedPosts

			var list string
			for i, post := range updatedPosts {
				list += fmt.Sprintf("%d ‚Äî üìù –¢–µ–º–∞: %s\n", i+1, post.Theme)
				list += fmt.Sprintf("‚úçÔ∏è –°—Ç–∏–ª—å: %s\n", post.Style)
				list += fmt.Sprintf("üåê –Ø–∑—ã–∫: %s\n", post.Language)
				list += fmt.Sprintf("üìÑ –î–ª–∏–Ω–∞: %s, %s",
					post.Length,
					post.PostAt.Format("02.01.06 15:04"),
				)
				if post.Photo != "" {
					if strings.Contains(post.Photo, "pexels") {
						list += " (pexels)"
					} else {
						list += " (–í–∞—à–µ —Ñ–æ—Ç–æ)"
					}
				}
				list += "\n"
			}

			msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"+list)
			msg.ReplyMarkup = bot2.DeletePostKeyboard(updatedPosts)
			Bot.Send(msg)
			return
		}

	}
}

func handleCallback(query *tgbotapi.CallbackQuery, s *session.Session) {
	chatID := query.Message.Chat.ID
	data := query.Data

	if !checkSubscription(query.From.ID) {
		reply := tgbotapi.NewMessage(query.Message.Chat.ID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @star_poster, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!")
		Bot.Send(reply)
		return
	}

	if strings.HasPrefix(data, "delete_") {
		idStr := strings.TrimPrefix(data, "delete_")
		postID, _ := strconv.Atoi(idStr)
		err := db.DeleteScheduledPostByID(database, int64(postID))
		if err != nil {
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"))
		} else {
			Bot.Send(tgbotapi.NewMessage(chatID, "üóë –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω"))
		}
		return
	}

	if strings.HasPrefix(data, "edit_") {
		idStr := strings.TrimPrefix(data, "edit_")
		_ = idStr // –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
		Bot.Send(tgbotapi.NewMessage(chatID, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"))
	}
}

func parseTime(text string) (time.Time, error) {
	layout := "2006-01-02 15:04"
	return time.Parse(layout, text)
}

func generatePost(s *session.Session, chatID int64, fileID string) {
	style := map[string]string{
		"ü§ì –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π":     "expert",
		"üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π":    "friendly",
		"üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π": "informational",
		"üé≠ –õ–∏—Ä–∏—á–µ—Å–∫–∏–π":     "lyrical",
	}[s.Data["style"]]

	lang := map[string]string{
		"üá∑üá∫ –†—É—Å—Å–∫–∏–π":    "ru",
		"üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
	}[s.Data["language"]]

	length := map[string]string{
		"‚úèÔ∏è –ö–æ—Ä–æ—Ç–∫–∏–π": "short",
		"üìÑ –°—Ä–µ–¥–Ω–∏–π":   "medium",
		"üìö –î–ª–∏–Ω–Ω—ã–π":   "long",
	}[s.Data["length"]]

	theme := s.Data["theme"]
	prompt := fmt.Sprintf("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π %s –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É \"%s\" –≤ —Å—Ç–∏–ª–µ %s –Ω–∞ —è–∑—ã–∫–µ %s", length, theme, style, lang)

	text, _, err := api.GeneratePostFromPrompt(prompt)
	if err != nil {
		Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"))
		return
	}

	channelUsername := s.Data["channel_username"]
	if channelUsername == "" {
		Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω."))
		return
	}
	if !strings.HasPrefix(channelUsername, "@") {
		channelUsername = "@" + channelUsername
	}

	var sendErr error

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
	if fileID != "" {
		photo := tgbotapi.NewPhotoToChannel(channelUsername, tgbotapi.FileID(fileID))
		_, sendErr = Bot.Send(photo)
	} else {
		translated, err := api.Translate(theme, "en")
		if err != nil || translated == "" {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–º—É %q, –∏—Å–ø–æ–ª—å–∑—É—é –∫–∞–∫ –µ—Å—Ç—å", theme)
			translated = theme
		} else {
			log.Printf("üåê –¢–µ–º–∞ %q –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∫–∞–∫ %q", theme, translated)
		}

		imgURL, err := pexels.FetchImage(translated)

		if err != nil || imgURL == "" {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –≤ Pexels –ø–æ —Ç–µ–º–µ: %s", theme)
			Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ —Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Ç–µ–º—É."))
			return
		}
		photo := tgbotapi.NewPhotoToChannel(channelUsername, tgbotapi.FileURL(imgURL))
		_, sendErr = Bot.Send(photo)
	}

	if sendErr != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª %s: %v", channelUsername, sendErr)
		Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
	textMsg := tgbotapi.NewMessageToChannel(channelUsername, text)
	_, sendErr = Bot.Send(textMsg)
	if sendErr != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª %s: %v", channelUsername, sendErr)
		Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."))
		return
	}

	// –ï—Å–ª–∏ —Å—é–¥–∞ –¥–æ—à–ª–∏ ‚Äî –≤—Å—ë –æ–∫
	Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ "+channelUsername))

}

func showStyleOptions(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚úçÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–∞:")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("ü§ì –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π"),
			tgbotapi.NewKeyboardButton("üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π"),
			tgbotapi.NewKeyboardButton("üé≠ –õ–∏—Ä–∏—á–µ—Å–∫–∏–π"),
		),
	)
	Bot.Send(msg)
}

func showLanguageOptions(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üåê –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–æ—Å—Ç–∞:")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
			tgbotapi.NewKeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"),
		),
	)
	Bot.Send(msg)
}

func showLengthOptions(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üìè –í—ã–±–µ—Ä–∏ –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞:")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úèÔ∏è –ö–æ—Ä–æ—Ç–∫–∏–π"),
			tgbotapi.NewKeyboardButton("üìÑ –°—Ä–µ–¥–Ω–∏–π"),
			tgbotapi.NewKeyboardButton("üìö –î–ª–∏–Ω–Ω—ã–π"),
		),
	)
	Bot.Send(msg)
}

func isValidDate(dateStr string) bool {
	_, err := time.Parse("02.01.06", dateStr)
	return err == nil
}

func isValidTime(timeStr string) bool {
	_, err := time.Parse("15:04", timeStr)
	return err == nil
}

func parseDateTime(dateStr, timeStr string) (time.Time, error) {
	return time.Parse("02.01.06 15:04", dateStr+" "+timeStr)
}
