package bot2

import (
	"database/sql"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"mybot/api"
	"mybot/db"
	"mybot/pexels"
	"mybot/sub"
)

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
func PublishScheduledPosts(bot *tgbotapi.BotAPI, database *sql.DB) {
	now := time.Now()

	posts, err := db.GetScheduledPostsByTime(database, now)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:", err)
		return
	}

	for _, post := range posts {
		// –ë–µ—Ä—ë–º –∫–∞–Ω–∞–ª (–¥–ª—è paywall –∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π)
		ch, err := db.GetChannelByID(database, int(post.ChannelID))
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª id=%d: %v\n", post.ChannelID, err)
			continue
		}

		// üîí Paywall: –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–µ–ª–∞–µ—Ç helper)
		if !sub.GuardActiveSubscription(bot, database, int(post.ChannelID), ch.ChannelTitle, ch.ClientID) {
			// –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ)
			continue
		}

		// username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ "@channel")
		channelUsername, err := db.GetChannelUsernameByID(database, int(post.ChannelID))
		if err != nil || channelUsername == "" {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –∫–∞–Ω–∞–ª–∞ –¥–ª—è channel_id=%d: %v\n", post.ChannelID, err)
			continue
		}

		// 1) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
		style := map[string]string{
			"ü§ì –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π":     "expert",
			"üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π":    "friendly",
			"üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π": "informational",
			"üé≠ –õ–∏—Ä–∏—á–µ—Å–∫–∏–π":     "lyrical",
		}[post.Style]

		lang := map[string]string{
			"üá∑üá∫ –†—É—Å—Å–∫–∏–π":    "ru",
			"üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
		}[post.Language]

		length := map[string]string{
			"‚úèÔ∏è –ö–æ—Ä–æ—Ç–∫–∏–π": "short",
			"üìÑ –°—Ä–µ–¥–Ω–∏–π":   "medium",
			"üìö –î–ª–∏–Ω–Ω—ã–π":   "long",
		}[post.Length]

		prompt := fmt.Sprintf(
			"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π %s –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É %q –≤ —Å—Ç–∏–ª–µ %s –Ω–∞ —è–∑—ã–∫–µ %s",
			length, post.Theme, style, lang,
		)

		text, _, err := api.GeneratePostFromPrompt(prompt)
		if err != nil || text == "" {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è channel_id=%d: %v", post.ChannelID, err)
			continue
		}

		// 2) –ö–∞—Ä—Ç–∏–Ω–∫–∞
		if post.Photo != "" {
			// –§–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			photo := tgbotapi.NewPhotoToChannel(channelUsername, tgbotapi.FileID(post.Photo))
			if _, err := bot.Send(photo); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ %s: %v", channelUsername, err)
				// –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º ‚Äî —Ç–µ–∫—Å—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º
			}
		} else {
			// –§–æ—Ç–æ —Å Pexels –ø–æ —Ç–µ–º–µ
			translated, err := api.Translate(post.Theme, "en")
			if err != nil || translated == "" {
				log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–º—É %q, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å", post.Theme)
				translated = post.Theme
			}

			imgURL, err := pexels.FetchImage(translated)
			if err != nil || imgURL == "" {
				log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –ø–æ —Ç–µ–º–µ: %s (–ø–µ—Ä–µ–≤–æ–¥: %s)", post.Theme, translated)
			} else {
				photo := tgbotapi.NewPhotoToChannel(channelUsername, tgbotapi.FileURL(imgURL))
				if _, err := bot.Send(photo); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ Pexels –≤ %s: %v", channelUsername, err)
				}
			}
		}

		// 3) –¢–µ–∫—Å—Ç
		msg := tgbotapi.NewMessageToChannel(channelUsername, text)
		if _, err := bot.Send(msg); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ %s: %v", channelUsername, err)
			continue
		}

		log.Printf("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ %s", channelUsername)

		// 4) –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		if err := db.DeleteScheduledPostByID(database, post.ID); err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç #%d: %v", post.ID, err)
		}
	}
}

// –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ UI/–ª–æ–≥–∞—Ö
func RegenerateContent(post *db.ScheduledPost) string {
	return fmt.Sprintf("üìù –¢–µ–º–∞: %s\n‚úçÔ∏è –°—Ç–∏–ª—å: %s\nüåê –Ø–∑—ã–∫: %s\nüìÑ –î–ª–∏–Ω–∞: %s",
		post.Theme, post.Style, post.Language, post.Length)
}
